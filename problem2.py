#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
EULER PROJECT

@author: cristhiamdaniel
"""


'''
PROBLEM 2
Each new term in the Fibonacci sequence is generated by adding
the previous two terms. By starting with 1 and 2, the first 10 terms
will be:
            1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
By considering the terms in the Fibonacci sequence whose values
do not exceed four million, find the sum of the even-valued terms.
'''

# Sum of even values ​​within a fibonacci series

def sum(n):
    list = [1,2] # First two values ​​of the series
    i = 2 # serial number position
    
    # As long as the last value of the series is less than or equal to n
    while list[-1] <= n:
        fibonacci = list[i-1] + list[i-2] #fibonacci number
        list.append(fibonacci) # fibonacci number added to list
        i += 1 
    # last fibonacci number removed
    #this number is greater than n
    list.pop(-1) 
    
    print('Fibonacci series whose values ​​are less than ', n, ':')
    print(list)
        
    list_even_values = [] # empty list for even values
    
    
    #loop to insert in the empty list only the even values
    for j in list:
        if j%2 == 0:
            list_even_values.append(j)
    
    print('even numbers of the fibonacci series less than ',n, ':')
    print(list_even_values)
        
    sum = 0
    
    # loop to add all even values ​​of fibonacci series
    for k in list_even_values:
        sum += k
    
    
    return print('Sum of list of even values: ', sum)
